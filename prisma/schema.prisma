// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Course {
  id          String  @id @default(uuid())
  userId      String
  courseOwner User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String  @db.Text
  description String? @db.Text
  imageUrl    String? @db.Text
  price       Float?
  isPublished Boolean @default(false)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  chapters    Chapter[]
  attachments Attachment[]
  purchases   Purchase[]

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  // @@fulltext([title])
  Institution   Institution?    @relation(fields: [institutionId], references: [id])
  institutionId String?
  Quiz          Quiz[]
  Enrollment    Enrollment[]
  Certification Certification[]

  @@index([categoryId])
  @@index([institutionId])
  @@index([userId])
}

model Category {
  id   String @id @default(uuid())
  name String @unique

  courses Course[]
}

model InstitutionType {
  id   String @id @default(uuid())
  name String @unique

  institution Institution[]
}

model Attachment {
  id   String @id @default(uuid())
  name String
  url  String @db.Text

  courseId String?
  course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  institutionId String?
  institution   Institution? @relation(fields: [institutionId], references: [id], onDelete: Cascade)

  @@index([courseId])
  @@index([institutionId])
}

model Chapter {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  videoUrl    String? @db.Text
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  muxData MuxData?

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Quiz      Quiz?

  @@index([courseId])
}

model MuxData {
  id         String  @id @default(uuid())
  assetId    String
  playbackId String?

  chapterId String  @unique
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id     String @id @default(uuid())
  userId String

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Purchase {
  id     String @id @default(uuid())
  userId String

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id                String @id @default(uuid())
  userId            String @unique
  striperCustomerId String @unique

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Institution {
  id                   String       @id @default(uuid())
  name                 String       @unique
  address              String?
  contactEmail         String?      @unique @db.Text
  contactPhone         String?      @db.Text
  website              String?      @db.Text
  registrationNumber   String?      @unique
  imageUrl             String?      @db.Text

  accreditationDetails String?
  isActivated          Boolean      @default(false)
  supportingDocuments  Attachment[]
  createdAt            DateTime     @default(now())

  institutionTypeId    String?
  institutionType      InstitutionType? @relation(fields: [institutionTypeId], references: [id])

  owner                String?       @unique
  
  users                User[]
  courses              Course[]

  @@index([contactEmail])
  @@index([institutionTypeId])
}

model User {
  id             String        @id
  username       String        @unique
  email          String        @unique @db.Text
  password       String?
  role           Role
  imageUrl       String?       @db.Text
  firstName      String
  lastName       String
  dateJoined     DateTime      @default(now())
  lastLogin      DateTime      @updatedAt
  isActive       Boolean       @default(true)
  institutionId  String?
  institution    Institution?  @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  subscriptionPlan String
  coursesLimit Int
  createdCourses Int           @default(0)

  courses        Course[]

  enrollments    Enrollment[]
  progress       UserProgress[]
  quizAnswers    QuizAnswer[]
  quizResults    QuizResult[]
  certifications Certification[]

  @@index([email])
  @@index([username])
  @@index([institutionId])
}


model Quiz {
  id        String         @id @default(uuid())
  title     String
  courseId  String
  course    Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  chapterId String?        @unique
  chapter   Chapter?       @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  questions QuizQuestion[]
  results   QuizResult[]

  @@index([courseId])
}

model QuizQuestion {
  id           String       @id @default(uuid())
  quizId       String
  quiz         Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  questionText String       @db.Text
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  answers      QuizAnswer[]

  @@index([quizId])
}

model QuizAnswer {
  id         String       @id @default(uuid())
  userId     String
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  questionId String
  question   QuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answerText String       @db.Text
  isCorrect  Boolean
  answeredAt DateTime     @default(now())

  @@index([userId])
  @@index([questionId])
}

model QuizResult {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId      String
  quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  score       Float
  completedAt DateTime @default(now())

  @@index([userId])
  @@index([quizId])
}

model Enrollment {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId   String
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrolledAt DateTime @default(now())

  @@index([userId])
  @@index([courseId])
}

model Certification {
  id       String   @id @default(uuid())
  userId   String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId String
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  issuedAt DateTime @default(now())

  @@index([userId])
  @@index([courseId])
}

enum Role {
  STUDENT
  INSTRUCTOR
  BUSINESSOWNER
}
